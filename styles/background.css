/* 
 * Universal Selector
 * Reset margin and padding for all elements and set box-sizing to border-box 
 * for consistent element sizing across different browsers.
 */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* 
 * Ensures that the html and body occupy full viewport height 
 * and have no default spacing.
 */
html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    user-select: none;
    -webkit-user-select: none; /* Safari */
    -moz-user-select: none;    /* Firefox */
    -ms-user-select: none;     /* IE10+ */
    font-family: 'Montserrat', sans-serif;
    scroll-behavior: smooth;
}

/* 
 * Styles the container for the particle effect.
 * Positioned fixed to cover the entire screen and stay static during scroll.
 * Uses a radial gradient background for a dynamic space-like look.
 * z-index set to 0 so content appears above it.
 */
#particles-js {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: radial-gradient(circle at 50% 30%, #1c2e3e, #0d1117 70%, #000000 100%);
    z-index: -10;
    pointer-events: auto;
}

/* 
 * Content wrapper with relative position and higher z-index
 * to appear on top of the particle background.
 */
.main-content {
    position: relative;
    z-index: 1; /* ensures it appears above the background */
}

/* 
 * Additional body and html styling.
 * Sets a consistent font across the page and background fallback.
 * Disables horizontal scroll by hiding x-overflow.
 */
body, html {
    height: 100%;
    font-family: 'Poppins', sans-serif;
    background: transparent;
    overflow-x: hidden;
}

/* 
 * Fullscreen loader styling.
 * Centers loader elements vertically and horizontally.
 * z-index ensures it overlays all content.
 */
#loader {
    position: fixed;
    width: 100%;
    height: 100%;
    background: #000;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000; /* very high to overlay all content */
}

/* 
 * Loader animation container.
 * Defines custom CSS variables for animation size, color, and speed.
 * Aligns loader cubes at the bottom with spacing between them.
 */
.container {
    --uib-size: 45px;
    --uib-color: white;
    --uib-speed: 1.75s;
    display: flex;
    align-items: flex-end;
    padding-bottom: 20%; /* vertical position of loader */
    justify-content: space-between;
    width: var(--uib-size);
    height: calc(var(--uib-size) * 0.6);
}

/* 
 * Individual cube styling inside loader.
 * Shrinks when space is constrained.
 * Applies a jumping animation.
 */
.cube {
    flex-shrink: 0;
    width: calc(var(--uib-size) * 0.2);
    height: calc(var(--uib-size) * 0.2);
    animation: jump var(--uib-speed) ease-in-out infinite;
}

/* 
 * Inner part of the cube.
 * Rounded shape with animation for squashing/stretching effect.
 * Smooth transition for background color changes.
 */
.cube__inner {
    display: block;
    height: 100%;
    width: 100%;
    border-radius: 25%; /* gives a soft corner */
    background-color: var(--uib-color);
    transform-origin: center bottom; /* sets pivot for animation */
    animation: morph var(--uib-speed) ease-in-out infinite;
    transition: background-color 0.3s ease;
}

/* 
 * Delay the jump and morph animations for the 2nd cube,
 * creating a sequential bouncing effect.
 */
.cube:nth-child(2) {
    animation-delay: calc(var(--uib-speed) * -0.36);
}
.cube:nth-child(2) .cube__inner {
    animation-delay: calc(var(--uib-speed) * -0.36);
}

/* 
 * Delay jump and morph animations for the 3rd cube,
 * continuing the staggered animation pattern.
 */
.cube:nth-child(3) {
    animation-delay: calc(var(--uib-speed) * -0.2);
}
.cube:nth-child(3) .cube__inner {
    animation-delay: calc(var(--uib-speed) * -0.2);
}

/* 
 * Keyframe for "jump" animation.
 * Simulates a vertical bounce with easing to enhance realism.
 */
@keyframes jump {
    0% { transform: translateY(0px); }
    30% { transform: translateY(0px); animation-timing-function: ease-out; }
    50% { transform: translateY(-200%); animation-timing-function: ease-in; }
    75% { transform: translateY(0px); animation-timing-function: ease-in; }
}

/* 
 * Keyframe for "morph" animation.
 * Adds scale transformations to create a squish and stretch effect
 * that mimics physical deformation when jumping.
 */
@keyframes morph {
    0%, 10% { transform: scaleY(1); }
    20%, 25% { transform: scaleY(0.6) scaleX(1.3); animation-timing-function: ease-in-out; }
    30% { transform: scaleY(1.15) scaleX(0.9); animation-timing-function: ease-in-out; }
    40%, 70%, 85%, 100% { transform: scaleY(1); }
    75% { transform: scaleY(0.8) scaleX(1.2); }
}
